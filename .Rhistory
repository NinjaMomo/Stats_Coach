values = list(),
hasSubTable = FALSE,
subTables = c(),
dataCols = dataCols,
get = function(x) tableObjs[[x]],
set = function(x, value) tableObjs[[x]] <<- value)
tableObjs <- list2env(tableObjs)
class(tableObjs) <- "Table"
return(tableObjs)
}
tableObjs.setValues <- function(table, values, key)
{
table$values[[key]] <- values
}
tableObjs.setRowNames <- function(table, rowName)
{
table$rowNames <- c(table$rowNames, rowName)
}
tableObjs.setColNames <- function(table, colName)
{
table$colNames <- c(table$colNames, colName)
}
tableObjs.tableToDataFrame <- function(table)
{
dFrame <- data.frame(matrix(unlist(table$get('values')), length(table$get('rowNames')), length(table$get('colNames')), byrow = TRUE), row.names = table$get('rowNames'), stringsAsFactors = F)
colnames(dFrame) = table$get('colNames')
dFrame
}
tableObjs.setSubTable <- function(table, subTable)
{
table$subTables[[subTable$get('name')]] <- subTable
}
t <- Tree(x)
#' Constructor
Tree <- function(treeHTML, name = "") {
treeObjs = list(treeHTML = treeHTML,
name = name,
tableNames = c(),
relevantTableNames = c(),
tables = c(),
get = function(x) treeObjs[[x]],
set = function(x, value) treeObjs[[x]] <<- value)
treeObjs$setName <- function(htmlTree = treeHTML, masterList = MasterList())
{
n <- treeObjs$name
desc <- sapply(getNodeSet(htmlTree, "//body"), xmlValue)
desc <- gsub("\\s", " ", desc)
for (i in masterList)
{
if (grepl(i, desc))
{
treeName <- i
}
}
n <- c(treeName)
assign('name', n, envir=treeObjs)
}
treeObjs$setTableNames <- function(htmlTree = treeHTML)
{
t <- treeObjs$tableNames
tableNames <- sapply(getNodeSet(htmlTree, "//table/caption"), xmlValue, recursive = FALSE)
t <- c(t,tableNames)
assign("tableNames", t, envir = treeObjs)
}
treeObjs$setRelevantTables <- function(tables = treeObjs$get("tableNames"), tablesToRemove = TablesToRemove())
{
tr <- treeObjs$relevantTableNames
for (i in tablesToRemove)
{
tables <- tables[i != tables]
}
tr <- c(tr, tables)
assign("relevantTableNames", tr, envir = treeObjs)
}
treeObjs$createTables <- function(tableNames = treeObjs$get("relevantTableNames"))
{
tr <- treeObjs$tables
for(i in 1:length(tableNames))
{
name <- tableNames[i]
numCols <- as.numeric(xmlAttrs(getNodeSet(treeObjs$get("treeHTML"), paste("//table[@aria-label = '", name, "']", sep = ""))[[1]])[['data-numcols']])
newTable <- Table(name = name, dataCols = c(1:numCols))
tr[[name]] <- newTable
}
assign("tables", tr, envir = treeObjs)
}
treeObjs$setTables <- function(tables = treeObjs$get("tables"), HTML = treeObjs$get("treeHTML"))
{
tb <- tables
for (t in tb)
{
treeObjs.setTable(t, HTML)
}
assign("tables", tb, envir = treeObjs)
}
treeObjs <- list2env(treeObjs)
class(treeObjs) <- "Tree"
treeObjs$setName()
treeObjs$setTableNames()
treeObjs$setRelevantTables()
treeObjs$createTables()
treeObjs$setTables()
return(treeObjs)
}
treeObjs.setTable <- function(masterTable, HTML, rowIndex = 1, table = NULL, colIndex = 0, colRange = c())  ##fix here
{
if (is.null(table))
{
table <- masterTable
}
if (length(colRange) == 0)
{
colRange <- table$get('dataCols')
}
masterTableName <- masterTable$get('name')
currentIndex <- colIndex
subcolIndex <- 0
cNames <- c()
valuesIndex <- c()
subTableIndices <- list()
for(i in rowIndex:length(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr", sep = ""))))
{
#cNames <- c(cNames, sapply(getNodeSet(HTML, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[contains(@class, 'columnLabels') and contains(@class, 'role3')]", sep = "")), xmlValue))
#replace here with colRange idea, need tryCatch
for (j in colRange)
{
tryCatch(
{
if(sum(names(xmlAttrs(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[contains(@class, 'columnLabels')]", sep = ""))[[j]])) == 'colspan') > 0)
{
colSpan <- as.numeric(xmlAttrs(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[contains(@class, 'columnLabels')]", sep = ""))[[j]])[['colspan']])
currentIndex <- currentIndex + colSpan
table$set('hasSubTable', TRUE)
subcolIndex <- subcolIndex + 1
subTableIndices <- c(subTableIndices, list(subcolIndex:(subcolIndex + colSpan - 1)))
newSubTable <- Table(xmlValue(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[contains(@class, 'columnLabels')]", sep = ""))[[j]]))
tableObjs.setSubTable(table, newSubTable)
}
else
{
currentIndex <- currentIndex + 1
valuesIndex <- c(valuesIndex, currentIndex)
cNames <- c(cNames, xmlValue(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[contains(@class, 'columnLabels')]", sep = ""))[[j]]))
}
}, error = function(err){return()})
}
if(table$get('hasSubTable'))
{
s <- 1
for(st in table$get('subTables'))
{
treeObjs.setTable(masterTable, HTML, rowIndex = i+1, table = st, colRange = subTableIndices[[s]])
s <- s + 1
}
break
}
}
rNames <- sapply(getNodeSet(HTML, paste("//table[@aria-label = '", masterTableName, "']//tr/td[contains(@class, 'rowLabels') and contains(@class, 'vCR role3')]", sep = "")), xmlValue)
table$set('colNames', cNames)
table$set('rowNames', rNames)
# Add stop condition if row name is found
##FIGURE THIS OUT AGAIN
for(i in rowIndex:length(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr", sep = ""))))
{
j = 1
tdValues <- c()
rowFound <- FALSE
while(length(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[", j,"]", sep = ""))) > 0)
{
if(rowFound)
{
tdValues <- c(tdValues, xmlValue(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[", j,"]", sep = ""))[[1]]))
}
if(sum(xmlValue(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[", j,"]", sep = ""))[[1]]) == rNames) > 0)
{
rn <- xmlValue(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[", j,"]", sep = ""))[[1]])
rowFound <- TRUE
}
j = j + 1
}
if(!is.null(tdValues))
{
tableObjs.setValues(table, tdValues[valuesIndex], rn)
}
}
}
###########################################################################################
###########################################################################################
#' Constructor
Table <- function(name = "", dataCols = c()) {
tableObjs = list(name = name,
rowNames = c(),
colNames = c(),
values = list(),
hasSubTable = FALSE,
subTables = c(),
dataCols = dataCols,
get = function(x) tableObjs[[x]],
set = function(x, value) tableObjs[[x]] <<- value)
tableObjs <- list2env(tableObjs)
class(tableObjs) <- "Table"
return(tableObjs)
}
tableObjs.setValues <- function(table, values, key)
{
table$values[[key]] <- values
}
tableObjs.setRowNames <- function(table, rowName)
{
table$rowNames <- c(table$rowNames, rowName)
}
tableObjs.setColNames <- function(table, colName)
{
table$colNames <- c(table$colNames, colName)
}
tableObjs.tableToDataFrame <- function(table)
{
dFrame <- data.frame(matrix(unlist(table$get('values')), length(table$get('rowNames')), length(table$get('colNames')), byrow = TRUE), row.names = table$get('rowNames'), stringsAsFactors = F)
colnames(dFrame) = table$get('colNames')
dFrame
}
tableObjs.setSubTable <- function(table, subTable)
{
table$subTables[[subTable$get('name')]] <- subTable
}
t <- Tree(x)
tableObjs.tableToDataFrame(t$get('tables')[[2]])
t$get('tables')[[3]]$get('subTables')[[1]]$get('rowNames')
t$get('tables')[[3]]$get('subTables')[[1]]$get('colNames')
tableObjs.tableToDataFrame(t$get('tables')[[3]]$get('subTables')[[1]])
tableObjs.tableToDataFrame(t$get('tables')[[3]]$get('subTables')[[1]]$get('subTables')[[1]])
#' Constructor
Tree <- function(treeHTML, name = "") {
treeObjs = list(treeHTML = treeHTML,
name = name,
tableNames = c(),
relevantTableNames = c(),
tables = c(),
get = function(x) treeObjs[[x]],
set = function(x, value) treeObjs[[x]] <<- value)
treeObjs$setName <- function(htmlTree = treeHTML, masterList = MasterList())
{
n <- treeObjs$name
desc <- sapply(getNodeSet(htmlTree, "//body"), xmlValue)
desc <- gsub("\\s", " ", desc)
for (i in masterList)
{
if (grepl(i, desc))
{
treeName <- i
}
}
n <- c(treeName)
assign('name', n, envir=treeObjs)
}
treeObjs$setTableNames <- function(htmlTree = treeHTML)
{
t <- treeObjs$tableNames
tableNames <- sapply(getNodeSet(htmlTree, "//table/caption"), xmlValue, recursive = FALSE)
t <- c(t,tableNames)
assign("tableNames", t, envir = treeObjs)
}
treeObjs$setRelevantTables <- function(tables = treeObjs$get("tableNames"), tablesToRemove = TablesToRemove())
{
tr <- treeObjs$relevantTableNames
for (i in tablesToRemove)
{
tables <- tables[i != tables]
}
tr <- c(tr, tables)
assign("relevantTableNames", tr, envir = treeObjs)
}
treeObjs$createTables <- function(tableNames = treeObjs$get("relevantTableNames"))
{
tr <- treeObjs$tables
for(i in 1:length(tableNames))
{
name <- tableNames[i]
numCols <- as.numeric(xmlAttrs(getNodeSet(treeObjs$get("treeHTML"), paste("//table[@aria-label = '", name, "']", sep = ""))[[1]])[['data-numcols']])
newTable <- Table(name = name, dataCols = c(1:numCols))
tr[[name]] <- newTable
}
assign("tables", tr, envir = treeObjs)
}
treeObjs$setTables <- function(tables = treeObjs$get("tables"), HTML = treeObjs$get("treeHTML"))
{
tb <- tables
for (t in tb)
{
treeObjs.setTable(t, HTML)
}
assign("tables", tb, envir = treeObjs)
}
treeObjs <- list2env(treeObjs)
class(treeObjs) <- "Tree"
treeObjs$setName()
treeObjs$setTableNames()
treeObjs$setRelevantTables()
treeObjs$createTables()
treeObjs$setTables()
return(treeObjs)
}
treeObjs.setTable <- function(masterTable, HTML, rowIndex = 1, table = NULL, colIndex = 0, colRange = c())  ##fix here
{
if (is.null(table))
{
table <- masterTable
}
if (length(colRange) == 0)
{
colRange <- table$get('dataCols')
}
masterTableName <- masterTable$get('name')
currentIndex <- colIndex
subcolIndex <- 0
cNames <- c()
valuesIndex <- c()
subTableIndices <- list()
for(i in rowIndex:length(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr", sep = ""))))
{
#cNames <- c(cNames, sapply(getNodeSet(HTML, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[contains(@class, 'columnLabels') and contains(@class, 'role3')]", sep = "")), xmlValue))
#replace here with colRange idea, need tryCatch
for (j in colRange)
{
tryCatch(
{
if(sum(names(xmlAttrs(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[contains(@class, 'columnLabels')]", sep = ""))[[j]])) == 'colspan') > 0)
{
colSpan <- as.numeric(xmlAttrs(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[contains(@class, 'columnLabels')]", sep = ""))[[j]])[['colspan']])
currentIndex <- currentIndex + colSpan
table$set('hasSubTable', TRUE)
subcolIndex <- subcolIndex + 1
subTableIndices <- c(subTableIndices, list(subcolIndex:(subcolIndex + colSpan - 1)))
newSubTable <- Table(xmlValue(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[contains(@class, 'columnLabels')]", sep = ""))[[j]]))
tableObjs.setSubTable(table, newSubTable)
}
else
{
currentIndex <- currentIndex + 1
valuesIndex <- c(valuesIndex, currentIndex)
cNames <- c(cNames, xmlValue(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[contains(@class, 'columnLabels')]", sep = ""))[[j]]))
}
}, error = function(err){return()})
}
if(table$get('hasSubTable'))
{
s <- 1
for(st in table$get('subTables'))
{
treeObjs.setTable(masterTable, HTML, rowIndex = i+1, table = st, colRange = subTableIndices[[s]])
s <- s + 1
}
break
}
}
rNames <- sapply(getNodeSet(HTML, paste("//table[@aria-label = '", masterTableName, "']//tr/td[contains(@class, 'rowLabels') and contains(@class, 'vCR role3')]", sep = "")), xmlValue)
table$set('colNames', cNames)
table$set('rowNames', rNames)
# Add stop condition if row name is found
##FIGURE THIS OUT AGAIN
for(i in rowIndex:length(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr", sep = ""))))
{
j = 1
tdValues <- c()
rowFound <- FALSE
while(length(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[", j,"]", sep = ""))) > 0)
{
if(rowFound)
{
tdValues <- c(tdValues, xmlValue(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[", j,"]", sep = ""))[[1]]))
}
if(sum(xmlValue(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[", j,"]", sep = ""))[[1]]) == rNames) > 0)
{
rn <- xmlValue(getNodeSet(x, paste("//table[@aria-label = '", masterTableName, "']//tr[",i,"]/td[", j,"]", sep = ""))[[1]])
rowFound <- TRUE
}
j = j + 1
}
if(!is.null(tdValues))
{
tableObjs.setValues(table, tdValues[valuesIndex], rn)
print(valuesIndex)
}
}
}
###########################################################################################
###########################################################################################
#' Constructor
Table <- function(name = "", dataCols = c()) {
tableObjs = list(name = name,
rowNames = c(),
colNames = c(),
values = list(),
hasSubTable = FALSE,
subTables = c(),
dataCols = dataCols,
get = function(x) tableObjs[[x]],
set = function(x, value) tableObjs[[x]] <<- value)
tableObjs <- list2env(tableObjs)
class(tableObjs) <- "Table"
return(tableObjs)
}
tableObjs.setValues <- function(table, values, key)
{
table$values[[key]] <- values
}
tableObjs.setRowNames <- function(table, rowName)
{
table$rowNames <- c(table$rowNames, rowName)
}
tableObjs.setColNames <- function(table, colName)
{
table$colNames <- c(table$colNames, colName)
}
tableObjs.tableToDataFrame <- function(table)
{
dFrame <- data.frame(matrix(unlist(table$get('values')), length(table$get('rowNames')), length(table$get('colNames')), byrow = TRUE), row.names = table$get('rowNames'), stringsAsFactors = F)
colnames(dFrame) = table$get('colNames')
dFrame
}
tableObjs.setSubTable <- function(table, subTable)
{
table$subTables[[subTable$get('name')]] <- subTable
}
t <- Tree(x)
a <- 5
b <- cat(a, "helle")
b <- invisible(cat(a, "helle"))
b <- suppressMessages(cat(a, "helle"))
b <- paste(a, "helle")
b
cat(b)
rm(list = ls())
a <- 5
b <- paste(a, "helle")
setwd("~/Work/StatsOutput/HTMLAttempt/SourceCodez")
source('main.R')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
b
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
output
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
output[1]
output[1]
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
L65.0
65.0
65.0L
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
rm(list = ls())
source('main.R')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
paste("hello", "I've")
print("I've")
c(output, Welcome to your Statistical Interpreter brought to you by [OLSPS Analytics](http://www.olsps.com/ 'Title'). We're here to hold your hand.")
c(output, "Welcome to your Statistical Interpreter brought to you by [OLSPS Analytics](http://www.olsps.com/ 'Title'). We're here to hold your hand.")
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
output
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
a <- 5
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
b <- "`r a`"
b
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
b <- a
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
unlist(Vars)
paste("hi", Vars)
paste("hi", unlist(Vars))
paste(Vars)
paste("hi", Vars, collapse = " ")
paste(Vars, collapse = ", ")
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
NVar <- as.integer(nrow(StatsDF))
NVar
rm(list = ls())
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
source('main.R')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
seq(3)
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
main('C:\\Users\\Damien\\Documents\\Work\\StatsOutput\\HTMLAttempt\\export.htm')
